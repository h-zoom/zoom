import base64
exec(base64.b64decode("IyBTdWtzZXNzIERlY29tcGlsZSDinJMgCmdob3N0ID0gaW5wdXQoIlx4MWJbMDszM20gRW50ZXIgUGFzc3dvcmQgU2NyaXB0IDogIikKaWYgZ2hvc3QgPT0gInpvb20iOgoJcHJpbnQoIlx4MWJbMDszM20g2KrZhSDYp9mE2K/YrtmI2YQg2KjZhtis2KfYrSIpCmVsc2U6CiAgICBwcmludCgiXHgxYlswOzMzbdmD2YTZhdmHINin2YTZhdix2YjYsSDYutmE2Lcg2KjYsdis2KfYoSDYp9mE2YXYrdin2YjZhNmHINmF2LHZhyDYp9iu2LHZiiDYp9mIINiq2K3Yr9irINmF2Lkg2KfZhNin2K/ZhdmGIEhhemVtIikKICAgIGV4aXQoKSAKaW1wb3J0IHJlcXVlc3RzLCBqc29uLCByYW5kb20sIHN0cmluZywgdGltZQpmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cAppbXBvcnQgb3MsIHN5cwpvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHJlcXVlc3RzJykKb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBiczQnKQpvcy5zeXN0ZW0oJ2NsZWFyJykKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQppbXBvcnQgb3Msc3lzLHRpbWUKZGVmIGphbGFuKHopOgogZm9yIGUgaW4geiArICdcbic6CiAgc3lzLnN0ZG91dC53cml0ZShlKQogIHN5cy5zdGRvdXQuZmx1c2goKQogIHRpbWUuc2xlZXAoMDAwMDAuMDMpCiAgaW5wdXQKamFsYW4oIiAgXDAzM1sxOzMzbSBXZWxsY29tZSBUTyBVbHRyYXNUZWNoIFNDUklQVCAiKQpqYWxhbignLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQpqYWxhbignXDAzM1sxOzMzbU1BS0UgQlkgSEFaRU0gRUxNQVJTSEFMJykKamFsYW4oJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJykKamFsYW4oIiAgXDAzM1sxOzMzbSDYp9iz2YPYsdio2KogMjAwINmF2YrYrNinINmB2YjYr9in2YHZiNmGIikKamFsYW4oJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJykKbnVtYmVyID0gaW5wdXQoIiBcMDMzWzE7MzNtRW50ZXIgeW91ciBudW1iZXI6ICIpLnN0cmlwKCkKamFsYW4oJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJykKcHdkID0gaW5wdXQoIiBFbnRlciB5b3VyIHBhc3N3b3JkOiAiKS5zdHJpcCgpCndpdGggcmVxdWVzdHMuU2Vzc2lvbigpIGFzIHJlcToKICAgIGRlZiBnZW5lcmF0aW9uTGluayhzdHJpbmdMaW5ndGgpOgogICAgICAgIGxhdHRlcnMgPSBzdHJpbmcuYXNjaWlfbG93ZXJjYXNlCiAgICAgICAgcmV0dXJuICcnLmpvaW4ocmFuZG9tLmNob2ljZShsYXR0ZXJzKSBmb3IgaSBpbiByYW5nZShzdHJpbmdMaW5ndGgpKQogICAgdXJsTG9naW5QYWdlID0gZidodHRwczovL3dlYi52b2RhZm9uZS5jb20uZWcvYXV0aC9yZWFsbXMvdmYtcmVhbG0vcHJvdG9jb2wvb3BlbmlkLWNvbm5lY3QvYXV0aD9jbGllbnRfaWQ9d2Vic2l0ZSZyZWRpcmVjdF91cmk9aHR0cHMlM0ElMkYlMkZ3ZWIudm9kYWZvbmUuY29tLmVnJTJGYXIlMkZLQ2xvZ2luJnN0YXRlPTI4NmQxMjE3LWRiMTQtNDg0Ni04NmMxLTk1MzliZWVhMDFlZCZyZXNwb25zZV9tb2RlPXF1ZXJ5JnJlc3BvbnNlX3R5cGU9Y29kZSZzY29wZT1vcGVuaWQmbm9uY2U9e2dlbmVyYXRpb25MaW5rKDEwKX0ma2NfbG9jYWxlPWVuJwogICAgcmVzcG9uc2VQYWdlTG9naW4gPSByZXEuZ2V0KHVybExvZ2luUGFnZSkKICAgIHNvdXAgPSBCZWF1dGlmdWxTb3VwKHJlc3BvbnNlUGFnZUxvZ2luLmNvbnRlbnQsICdodG1sLnBhcnNlcicpCiAgICBnZXRVcmxBY3Rpb24gPSBzb3VwLmZpbmQoJ2Zvcm0nKS5nZXQoJ2FjdGlvbicpCiAgICAjIHByaW50KGdldFVybEFjdGlvbikKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICBoZWFkZXJSZXF1ZXN0ID0gewogICAgJ0FjY2VwdCc6ICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45JywKICAgICdBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLAogICAgJ0FjY2VwdC1MYW5ndWFnZSc6ICdlbi1HQixlbjtxPTAuOSxhcjtxPTAuOCxhci1FRztxPTAuNyxlbi1VUztxPTAuNicsCiAgICAnQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJywKICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKICAgICdIb3N0JzogJ3dlYi52b2RhZm9uZS5jb20uZWcnLAogICAgJ09yaWdpbic6ICdodHRwczovL3dlYi52b2RhZm9uZS5jb20uZWcnLAogICAgJ1JlZmVyZXInOiB1cmxMb2dpblBhZ2UsCiAgICAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODEuMC40MDQ0LjEzOCBTYWZhcmkvNTM3LjM2JwogICAgfQogICAgZm9ybURhdGEgPSB7CiAgICAndXNlcm5hbWUnOm51bWJlciwKICAgICdwYXNzd29yZCc6cHdkCiAgICB9CiAgICBzZW5kVXNlckRhdGEgPSByZXEucG9zdChnZXRVcmxBY3Rpb24saGVhZGVycz1oZWFkZXJSZXF1ZXN0LGRhdGE9Zm9ybURhdGEpCiAgICBjaGVja1JlZ2lzdHJ5ID0gc2VuZFVzZXJEYXRhLnVybAogICAgX2NoZWNrUmVnaXN0cnkgPSBjaGVja1JlZ2lzdHJ5LmZpbmQoJ0tDbG9naW4nKQogICAgIyBbMl0gQ2hlY2sgdGhlIHJlZ2lzdHJ5CiAgICBpZiBfY2hlY2tSZWdpc3RyeSAhPSAtMToKICAgICAgICBjb2RlID0gY2hlY2tSZWdpc3RyeQogICAgICAgIF9jb2RlID0gY29kZVtjb2RlLmluZGV4KCdjb2RlPScpICsgNTpdCiAgICAgICAgaGVhZGVyQWNjZXNzVG9rZW4gPSB7CiAgICAgICAgJ0FjY2VwdCc6ICcqLyonLAogICAgICAgICdBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLAogICAgICAgICdBY2NlcHQtTGFuZ3VhZ2UnOiAnZW4tR0IsZW47cT0wLjksYXI7cT0wLjgsYXItRUc7cT0wLjcsZW4tVVM7cT0wLjYnLAogICAgICAgICdDb25uZWN0aW9uJzogJ2tlZXAtYWxpdmUnLAogICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKICAgICAgICAnSG9zdCc6ICd3ZWIudm9kYWZvbmUuY29tLmVnJywKICAgICAgICAnT3JpZ2luJzogJ2h0dHBzOi8vd2ViLnZvZGFmb25lLmNvbS5lZycsCiAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly93ZWIudm9kYWZvbmUuY29tLmVnL2FyL0tDbG9naW4nLAogICAgICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84MS4wLjQwNDQuMTM4IFNhZmFyaS81MzcuMzYnCiAgICAgICAgfQogICAgICAgIGZvcm1EYXRhQWNjZXNzVG9rZW4gPSB7CiAgICAgICAgJ2NvZGUnOiBfY29kZSwKICAgICAgICAnZ3JhbnRfdHlwZSc6ICdhdXRob3JpemF0aW9uX2NvZGUnLAogICAgICAgICdjbGllbnRfaWQnOiAnd2Vic2l0ZScsCiAgICAgICAgJ3JlZGlyZWN0X3VyaSc6ICdodHRwczovL3dlYi52b2RhZm9uZS5jb20uZWcvYXIvS0Nsb2dpbicKICAgICAgICB9CiAgICAgICAgc2VuZERhdGFBY2Nlc3NUb2tlbiA9IHJlcS5wb3N0KCdodHRwczovL3dlYi52b2RhZm9uZS5jb20uZWcvYXV0aC9yZWFsbXMvdmYtcmVhbG0vcHJvdG9jb2wvb3BlbmlkLWNvbm5lY3QvdG9rZW4nLGhlYWRlcnM9aGVhZGVyQWNjZXNzVG9rZW4sZGF0YT1mb3JtRGF0YUFjY2Vzc1Rva2VuKQpqd3QgPSBzZW5kRGF0YUFjY2Vzc1Rva2VuLmpzb24oKVsnYWNjZXNzX3Rva2VuJ10KdXJsPSJodHRwczovL21vYmlsZS52b2RhZm9uZS5jb20uZWc6NDQzL21vYmlsZS1hcHAvcHJvbW8vdW5pZmllZFJlZGVlbVByb21vIgpoZWFkZXJzPXsiQXV0aG9yaXphdGlvbiI6ICJCZWFyZXIgIisoand0KSsiIiwgIm9wZXJhdGluZ1N5c3RlbSI6ICJWMTEuMC44LjAuUENPTUlYTSIsICJwbGF0Zm9ybSI6ICJBbmRyb2lkIiwgImRldmljZVR5cGUiOiAiZ2lua2dvIiwgImJ1aWxkTnVtYmVyIjogIjQxNCIsCiJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCIsICJDb25uZWN0aW9uIjogImNsb3NlIiwgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwgIlVzZXItQWdlbnQiOiAib2todHRwLzMuMTIuMSJ9Cmpzb249eyJjaGFubmVsSWQiOiAzLCAiY29udGV4dHVhbE9wZXJhdGlvbklkIjogMCwgImNvbnRleHR1YWxQcm9tb0lkIjogMCwgIm9wZXJhdGlvbklkIjogMCwgInBhcmFtMSI6ICJWb2RhZm9uZSIsICJwcm9tb0lkIjogMzMzNiwgInRyaWdnZXJJZCI6IDMzMiwgInRyaWdnZXJUeXBlIjogIjYiLCAid2xpc3RJZCI6IDMyNTZ9CnI9cmVxdWVzdHMucG9zdCh1cmwsIGhlYWRlcnM9aGVhZGVycywganNvbj1qc29uKQpnPXIuanNvbigpWydnaWZ0UXVvdGEnXQpwcmludCgiIikKaWYgZyA9PSAiMjAwIjoKICAgIHByaW50KCLYqtmFINin2LbYp9mB2YcgMjAwINmF2YrYrNinINio2YbYrNin2K0iKQplbHNlOgoJcHJpbnQoItit2KfZiNmEINio2LnYryAyNCDYs9in2LnZhyAiKQ=="))